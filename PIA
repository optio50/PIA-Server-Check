#!/bin/bash
#
# World Wide Servers by ip
#
# Some Speed Test File Locations
# http://support.smartdnsproxy.com/customer/portal/articles/1907772-vpn-server-locations-addresses
# http://speedtest.sea01.softlayer.com/downloads/test100.zip
# http://proof.ovh.ca/files/100Mio.dat
# http://793343545.r.cdn77.net/design/swf/testfile100.bin
# http://speedtest.atlanta.linode.com/100MB-atlanta.bin
# http://speedtest.dallas.linode.com/100MB-dallas.bin
# http://speedtest.wdc01.softlayer.com/downloads/test100.zip
# http://mirror.us.leaseweb.net/speedtest/100mb.bin
# http://speedtest.sjc01.softlayer.com/downloads/test100.zip
#http://mirror.sfo12.us.leaseweb.net/speedtest/1000mb.bin
# U.S Servers by ip
# wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]' | grep us- | while read host ;do host $host ;done | awk '{print $NF}' | sort -u | xargs sudo netselect -v -s 20
# wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privacy\.network<' | tr -d '[<>]' | grep us- | while read host ;do host $host ;done | awk '{print $NF}' | sort -u | xargs sudo netselect -v -s 20
#
# tput is used to move the cursor and change colors
# This script is only verified with Ubuntu and distros based on Ubuntu
# sudo and apt are used to offer user to install an unmet dependancy that is package installable
# Outside of package manager Dependency requires manual install
# 
# Get IP Source
# curl -s 'https://api.ipify.org'
#
#
#  json output for geolocation
# curl -s https://ipapi.co/${MYIP}/json/ | jq -r '"IP : " + .ip, "City: " + .city, "State: " + .region, "Country: " + .country_name, "Location: " + "\(.latitude)\(.longitude)"' | column -s: -t
#
#  curl_or_wget=$(if hash curl 2>/dev/null; then echo curl; elif hash wget 2>/dev/null; then echo "wget -qO-"; fi)
# if [ -z "$curl_or_wget" ]; then
#    echo "Neither curl nor wget found. Cannot use http method." >&2
#    exit 1
#fi
#----------------------------------------------------------------------------------------------------

trap ctrl_c SIGHUP SIGINT SIGTERM
if [[ $EUID -ne 0 ]]; then
	printf "%b\n" "This script requires root privileges for Netselect (Fastest Server Check),
	installing required tools with apt and MAC Address Changing"
	printf "%b\n"
	printf "%b\n" "Example sudo "$0" "
	exit 1
fi

CHECKMARK="$(tput sgr0)[$(tput setaf 2)✔$(tput sgr0)]"
XMARK="$(tput sgr0)[$(tput setaf 1)X$(tput sgr0)]"

if command -v resize >/dev/null 2>&1 ; then
    resize -s 50 90
	clear
	tput cup 0 0
else
    printf '\e[8;50;105t'
    clear
    tput rc
fi

tput sgr0 # Reset Terminal Colors
if command -v netselect >/dev/null 2>&1 ; then
    printf "%b\n"

else

if command -v resize >/dev/null 2>&1 ; then
    resize -s 50 105
	clear
	tput cup 0 0
else
    printf '\e[8;50;105t'
    clear
    tput rc
fi
    clear
    printf "%b\n\n"
    tput setaf 1 # Red Text
    printf "%b\n" "Netselect is required but not found. You can download it from"
    tput sgr0 # Reset Terminal Colors

    tput setaf 3 # Magenta Text
    cat <<"EOF"

http://ftp.us.debian.org/debian/pool/main/n/netselect/
http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_i386.deb		i386
http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_arm64.deb		ARM64
http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_armhf.deb		ARMHF
http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_amd64.deb		AMD64

EOF

    if command -v wget >/dev/null 2>&1 ; then
        Downloader="wget"
elif
    command -v curl >/dev/null 2>&1 ; then
        Downloader="curl"
    fi

    tput sgr0 # Reset Terminal Colors
    printf "%b\n" "Your Architecture (i386, x86_64, etc.) Is"
    tput setaf 2 # Green Text
    arch=$(dpkg --print-architecture);printf "%b\n\t"; tput blink; printf "%b\n" "${arch}"
    tput sgr0 # Reset Terminal Colors
    printf "%b\n"
    tput sgr0 # Reset Terminal Colors
    tput setaf 2 # Green Text
    if [ "${arch}" = "arm64" ]; then
        printf "%b\n\n" "Suggested Download is"
        printf "%b\n" "http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_arm64.deb"
        targetDL="http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_arm64.deb"
    elif [ "${arch}" = "amd64" ]; then
        printf "%b\n\n" "Suggested Download is"
        printf "%b\n" "http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_amd64.deb"
        targetDL="http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_amd64.deb"
    elif [ "${arch}" = "i386" ]; then
        printf "%b\n\n" "Suggested Download is"
        printf "%b\n" "http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_i386.deb"
        targetDL="http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_i386.deb"
    elif [ "${arch}" = "armhf" ]; then
        printf "%b\n\n" "Suggested Download is"
        printf "%b\n" "http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_armhf.deb"
        targetDL="http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_armhf.deb"
    else
        printf "%b\n"
    fi
    tput setaf 3 # Yellow Text
    printf "%b\n"

    if [ -z "${targetDL}" ]
    then
        printf "%b\n" "Unknown"
        printf "%b\n" "Cant Determine Your Architecture, Manual Download and Install "
        printf "%b\n"
        tput sgr0 # Reset Terminal Colors
        printf "%b\n" "After Download install with"
        tput setaf 6 # Cyan Text
cat <<"EOF"

 dpkg -i netselect_0.3.ds1-28+b1_*.deb

EOF
        exit
    else
        read -r -n 1 -p "Would you like to attempt download and install now? [y/n] " response
        tput sgr0 # Reset Terminal Colors
        case "${response}" in
            [yY])
                if [ "${Downloader}" = curl ]; then
                    $(curl -O "${targetDL}")
                else
                    "${Downloader}" "${targetDL}"
                fi
                 dpkg -i "$(basename "${targetDL}")"
                exec $(readlink -f "$0")
                ;;
            *)

                exit
                ;;
        esac
    fi
fi

#----------------------------------------------------
# Dependencies Check
CheckScriptDependencies ()
{

declare -a ARRAY
ARRAY=()

	Packages=( "$@" )
	Package=
	printf "%b\n"
	for Package in ${Packages[@]}; do
		hash $Package 2> /dev/null
		if (( $? > 0 )); then
			
			printf "%b" "${XMARK}  ${Package}  Not Found But Required" "\n"
			ARRAY=(${ARRAY[@]} ${Package})
		fi
				
	done
	
				
	#ToInstall=$(printf "%s " ${ARRAY[@]})
	if [[ -z "${ARRAY[@]}" ]]; then
			Connection_Check
			
	fi

if dig -V >/dev/null 2>&1 ; then
		printf " "
		else
		ARRAY=( ${ARRAY[@]/dig} )
		ARRAY=(${ARRAY[@]} dnsutils ncurses-bin)
		#ToInstall=$(printf "%s " ${ARRAY[@]})	
	printf "%b\n"
	printf "%b\n" "Missing Dependencies" "\n"
	#printf "%b\n" ${ARRAY[@]}
	    printf "%b\n" "Would you like to try to install them now?"
    printf "%b\n"

    read -r -n 1 -p "[Y/n] " response
    case "${response}" in
    
        [nN])
			printf "\n"
            exit
            ;;
        *)

             apt install ${ARRAY[@]} && exec $(readlink -f "$0")
            ;;
    esac

			
			fi
	
}

#ProgressBar
spin()
{

    printf "["
    tput setaf 2
    while kill -0 "$SPIN_PID" 2> /dev/null; do
        printf  "✴ "
        sleep "${PBint}"
    done
    tput sgr0
    printf "]"

}



# Check for Internet Access with max retries of 3 then print message
#clear
#tput cup 0 0 # Move cursor to line 0 column 0
#tput ed # Clear all text below cursor
#tput cup 5 0

Connection_Check() {
printf "%b\n" "Checking For Internet Access"; printf "%b\n" "Pinging Google.com"; tput blink; printf "%b\n" ".";tput cup 0 0;tput sgr0 # Reset Terminal Colors
tput civis
if ping -q -c 2 -W 1 google.com >/dev/null; then
    Banner
    Main_Menu
else
    n=0
    until [ $n -gt 2 ]
    do
        ping -q -c 2 -W 1 google.com >/dev/null
        if [ $? -eq 0 ]; then
            break
        fi
        n=$(($n+1))

    done

    tput cup 0 0 # Move cursor to line 0 column 0
    tput ed # Clear all text below cursor
    tput cup 5 0
    printf "%b\n" "Retried 3 Times\n"
    printf "%b\n" "Network appears to be down. Unable to reach google.com for network connectivity test\n"
    printf "%b\n" "This script is pretty useless without Network access" "\n"
    tput cnorm
    printf "%b\n" "Continuing to Main Menu in 10 seconds"
    sleep 10
    clear
    Banner
    Main_Menu
fi
}
# Main script starts here


Banner() {
	#tput rc
	tput cup 0 0 # Move cursor to line 0 column 0
	#tput ed # Clear all text below cursor
	tput setaf 2 # Green Text
	cat <<"EOF"
https://github.com/optio50/PIA-Server-Check

    ____           _                   _
   |  _ \   _ __  (_) __   __   __ _  | |_    ___
   | |_) | | '__| | | \ \ / /  / _` | | __|  / _ \
   |  __/  | |    | |  \ V /  | (_| | | |_  |  __/
   |_|_    |_|    |_|   \_/    \__,_|  \__|  \___|   _
   |_ _|  _ __   | |_    ___   _ __   _ __     ___  | |_
    | |  | '_ \  | __|  / _ \ | '__| | '_ \   / _ \ | __|
    | |  | | | | | |_  |  __/ | |    | | | | |  __/ | |_
   |___| |_| |_|  \__|  \___| |_|    |_| |_|  \___|  \__|
    / \      ___    ___    ___   ___   ___      ___    ___    _ __ ___
   / _ \    / __|  / __|  / _ \ / __| / __|    / __|  / _ \  | '_ ` _ \
  / ___ \  | (__  | (__  |  __/ \__ \ \__ \   | (__  | (_) | | | | | | |
 /_/   \_\  \___|  \___|  \___| |___/ |___/ ✴  \___|  \___/  |_| |_| |_|


EOF
    tput sgr0 # Reset Terminal Colors
    printf "%b\n"

}
#------------------------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------------------------
# if dependency and network check is confirmed. Banner function runs then Main_Menu

Main_Menu() {
	#Banner
    printf "%b\n"
    tput cup 16 0 # Move cursor to line 16 column 0
    tput ed # Clear all text below cursor
    tput civis # invisible cursor
    # Begin Print Main Menu Selections
    cat <<"EOF"

Select Option

1. Check For PIA's Fastest Server

2. Speed Test Your Current Connection Speed

3. PIA Links

4. Whats My IP & Location

5. Show PIA Server Location Names

6. DNS Leak Test

7. Change MAC Address 

8. Exit / Quit

EOF
    # End Print Main Menu Selections

    tput cup 35 0 # Move cursor to line 26 column 0
    tput ed # Clear all text below cursor

    read -r -n 1 option # Wait and read menu selection then continue with a single key press

    case "${option}" in
        1)
            PIA_Menu
            ;;
        2)
            Speed_Test
            ;;
        3)
            Links
            ;;
        4)
            Location_Check
            ;;
        5)
            Server_Names
            ;;
        6)
			LeakTest
			;;
		7)
			Change_Mac_Menu
			;;
		8)
            #tput cup 25 0
            #tput ed
            tput cnorm
            #tput rmcup
			tput el1
			printf "%b\n"
            exit
            ;;
        *)
            #tput cup 16 0
            #tput ed
            Main_Menu
            ;;
    esac

}


# Romans Chapter 10 Verse 9-10  https://www.biblegateway.com/passage/?search=Romans+10%3A9-10&version=NIV
# 1 John Chapter 5 Verse 13     https://www.biblegateway.com/passage/?search=1+John+5%3A13&version=NIV

Server_Check() {

    tput cup 17 0 # Move cursor to line 15 column 0
    tput ed # Delete text below cursor
    #printf "%b\n" " "
    #printf "%b" "Checking For PIA's Fastest Server...Please Wait." "\n\n"
    # Checks ALL PIA Worldwide Servers
    #------------------------------------------------------------------------------------------------------
    if [ "${selection}" -eq 0 ]; then # Zero from PIA_Menu. All servers PIA has
        tput setaf 3 # Yellow Text
        printf "%b" "Checking All Servers Takes More Time....Be Patient" "\n" # warning that this worldwide server check takes longer
        server=$(wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]' | uniq) # Gets ALL servers
        serverCount=$(printf "%b\n" "${server}" | wc -l) # Counts the servers being selected
        countries=$(printf "%b\n" "${server}" | cut -c 1-2 | uniq | wc -l) # Counts the countries PIA has servers in
        tput setaf 2 # Green Text
        printf "%b\n" "Checking "${serverCount}" Locations From "${countries}" Countries" # Prints the amount of worldwide servers and countries
        tput sgr0 # Reset Terminal Colors
    else
        # Checks Selected PIA Servers
        #------------------------------------------------------------------------------------------------------
        server=$(wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]' | grep "${LOCATION}") # Only check selected country
        serverCount=$(printf "%b\n" "${server}" | wc -l) # Count the servers in selected country
        tput setaf 3 # Green Text
        printf "%b\n" "Checking "${serverCount}" Locations in Selected Country" # Print the number of server locations in selected country
        tput sgr0
    fi

    if [ "${selection}" -ne 0 ]; then
        printf "%b\n" "${server}" # Prints the selected server locations
    fi
    
    #-----------------------------------------------------------------
    #tput cup 0 15
    tput setaf 2 # Green Text
    printf "%b" "Checking For PIA's Fastest Server...Please Wait." "\n\n"
    tput sgr0 # Reset Terminal Colors
    printf "%b\n" "${server}" | xargs  netselect -s 1 > file1 & SPIN_PID=$! # Pipes each of the servers into Netselect and selects fastest
    PBint=2 # Progressbar Speed
    spin
    wait
    disown $SPIN_PID
    kill -9 $SPIN_PID
    tput sgr0 # Reset Terminal Colors
    tput cup 17 0 # Move cursor to line 15 column 0
    tput ed # Delete text below cursor
    fhostname=$(awk '{print $2}' file1) # Save fastest hostname
    printf "%b" "Fastest Hostname ";tput setaf 1; printf "%b" "${fhostname}" "\n"
    printf "%b\n"
    host "${fhostname}" > file2 # Pipe fastest hostname into the command 'host' to find all IP's for hostname'
    IPs=$(awk '{print $4}' file2) # Save IP addresses
    cAddresses=$(wc -l file2 | awk '{print $1}') # Count IP addresses
    tput sgr0
    printf "%b" "${fhostname}";tput setaf 3;printf "%b" " Has "${cAddresses}" Servers For That Hostname" "\n\n" # Print the number of IP addresses
    tput sgr0 # Reset Terminal Colors
    printf "%b\n" "${IPs}" # Print IP addresses
    printf "%b\n"
    printf "%b" "Checking For The Fastest IP Address To";tput setaf 2; printf "%b" " "${fhostname}" " "\n\n"
    tput setaf 2 # Green Text
    printf "%b\n" "${IPs}" | xargs  netselect -s 1 > file3 & SPIN_PID=$! # Pipe the saved IP's in Netselect and select fastest IP
    PBint=1 # Progressbar Speed
    spin
    wait
    FinalIP=$(awk '{print $2}' file3)
    disown $SPIN_PID
    kill -9 $SPIN_PID
    tput cup 18 0 # Move cursor to line 20 column 0
    tput ed # Delete text below cursor
    ping -c 10 "${FinalIP}" > file4 & SPIN_PID=$! # Save the average ping time of the fastest IP
    printf "%b\n" "Measuring Response Time For The Fastest IP Address"
    PBint=.5 # Progressbar Speed
    spin
    wait
    disown $SPIN_PID
    kill -9 $SPIN_PID
    resptime=$(tail -1 file4 | awk -F '/' '{print $5 "ms"}')
    tput cup 18 0 # Move cursor to line 20 column 0
    tput ed # Delete text below cursor
    printf "%b\n" "==========================================================================="
    tput setaf 3 # Yellow Text
    printf "%b\n\n" "${FinalIP}" "Is The Fastest IP Address and Has an Avg Response Time Of "${resptime}"" # Print fastest IP and average ping time
    tput sgr0
	printf "%b\n" "==========================================================================="
	printf "%b" "PIA Speed Test Link "; printf "%b\n" http://"${fhostname}":8888/speedtest/
    rm file1 file2 file3 file4 2> /dev/null # remove the temporary files
    cat <<"EOF"

Select Option:

1. Back To Main Menu

Or

Any Key To Exit / Quit

EOF

    read -r -n 1  continue
    case "${continue}" in
        1)
            Main_Menu
            ;;
        *)
            tput ech 1
            printf "%b\n"
            tput cnorm
            exit
            ;;
    esac
}

Links(){
	tput el1
    tput setaf 2 # Green Text
    tput cup 16 0 # Move cursor to line 16 column 0
    tput ed # Clear all text below cursor
    cat <<"EOF"

https://www.privateinternetaccess.com/				PIA Homepage
https://www.privateinternetaccess.com/blog/			PIA News
https://www.privateinternetaccess.com/pages/network/		Server Locations
https://www.privateinternetaccess.com/pages/download		Download PIA Client
https://www.privateinternetaccess.com/helpdesk/			Support / Help
https://www.privateinternetaccess.com/pages/how-it-works/	How VPN Packages Work



https://www.facebook.com/privateinternetaccess			FACEBOOK
https://twitter.com/buyvpnservice				TWITTER
https://www.reddit.com/r/PrivateInternetAccess/			REDDIT
https://www.youtube.com/user/vpnservice/videos			YOUTUBE

EOF
    tput sgr0 # Reset Terminal Colors
    #tput civis
    read -r -n 1 -p " Press Any Key To Continue " continue
    Main_Menu
}

PIA_Menu() {
    tput cup 24 0 # Move cursor to line 22 column 0
    tput ed # Delete text below cursor
    printf "%b\n"
    printf "%b\n" "Checking For VPN Connection"
    ValuePIA=$(curl -m 10 -s https://www.privateinternetaccess.com/pages/whats-my-ip/ | grep -c "You are protected") #Check if already connected PIA

    if (( "${ValuePIA}" > 0 ))
    then
        tput cup 17 0 # Move cursor to line 15 column 0
        tput ed # Delete text below cursor
        tput setaf 3 # Yellow Text
        # Warning about slower ping times while being connected to PIA
        printf "%b" "You are currently connected to PIA's VPN service.
More realistic results can be achived if you are not connected
to PIA for the \"Fastest Server Check\""
tput sgr0 # reset terminal colors
else
tput cup 17 0 # Move cursor to line 15 column 0
tput ed # Delete text below cursor
fi


# Print PIA country select
printf "%b\n"
cat <<"EOF"

Select Country

1. USA
2. UK
3. Canada
4. Australia
5. New Zealand
6. Germany
7. Hong Kong
8. Japan
9. Israel
0. ALL SERVERS PIA OFFERS

Any Other Key To Main Menu

EOF
# read country selection and wait for a single key press
read -r -n 1 selection
case "${selection}" in

	0)
	LOCATION=""
	;;
	1)
	LOCATION="us-";;
	2)
	LOCATION="uk-";;
	3)
	LOCATION="ca-";;
	4)
	LOCATION="au-";;
	5)
	LOCATION="nz.";;
	6)
	LOCATION="de-";;
	7)
	LOCATION="hk.";;
	8)
	LOCATION="japan.";;
	9)
	LOCATION="israel";;
	*)
	#clear
	#Banner
	Main_Menu
	tput cup 16 0
	tput ed
	;;
	esac
	Server_Check
}

Server_Names() {
# Print PIA country select
tput cup 16 0
tput ed
printf "%b\n"
cat <<"EOF"

Select Country

1. USA
2. UK
3. Canada
4. Australia
5. New Zealand
6. Germany
7. Hong Kong
8. Japan
9. Israel
0. ALL SERVERS PIA OFFERS

Any Other Key To Main Menu

EOF
# read country selection and wait for a single key press
read -r -n 1 selection
case "${selection}" in

	0)
	LOCATION=""
	ActBanner=Yes
	;;
	1)
	LOCATION="us-";;
	2)
	LOCATION="uk-";;
	3)
	LOCATION="ca-";;
	4)
	LOCATION="au-";;
	5)
	LOCATION="nz.";;
	6)
	LOCATION="de-";;
	7)
	LOCATION="hk.";;
	8)
	LOCATION="japan.";;
	9)
	LOCATION="israel";;
	*)
	#clear
	#Banner
	Main_Menu
	tput cup 16 0
	tput ed
	;;
	esac
	List_Names
}

List_Names() {
tput cup 16 0
tput ed
if [ "${selection}" -eq 0 ]; then # Zero from PIA_Menu. All servers PIA has
tput sc
tput setaf 3 # Yellow Text
server=$(wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]' | uniq) # Gets ALL servers
serverCount=$(printf "%b\n" "${server}" | wc -l) # Counts the servers being selected
countries=$(printf "%b\n" "${server}" | cut -c 1-2 | uniq | wc -l) # Counts the countries PIA has servers in
tput setaf 2 # Green Text
printf "%b\n" "Listing "${serverCount}" Locations From "${countries}" Countries" # Prints the amount of worldwide servers and countries
tput sgr0 # Reset Terminal Colors
else
# Checks Selected PIA Servers
#------------------------------------------------------------------------------------------------------
server=$(wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]' | grep "${LOCATION}") # Only check selected country
serverCount=$(printf "%b\n" "${server}" | wc -l) # Count the servers in selected country
tput setaf 3 # Green Text
printf "%b\n" "Listing "${serverCount}" Locations in Selected Country" # Print the number of server locations in selected country
tput sgr0
fi

if [ "${selection}" -eq 0 ]; then
printf "%b\n\n" "${server}" | pr -ts"               " --columns 2 | column -t #  Prints the selected server locations
else
printf "%b\n\n" "${server}" #  Prints the selected server locations
fi
printf "%b\n\n"
read -r -n 1 -p " Press Any Key To Continue " continue
if [ "${ActBanner}" = Yes ]; then
tput rc
Banner
fi
	Main_Menu

}

Speed_Test() {
tput cup 16 0
tput ed
PIAconnect=$(curl -m 5 -s https://www.privateinternetaccess.com/pages/whats-my-ip/ | grep -c "You are protected")
                if (( "${PIAconnect}" > 0 )) ; then
                printf "%b\n" "${CHECKMARK}$(tput setaf 2) This Speed Test is with PIA VPN Active"
                else
                printf "%b\n" "${XMARK}$(tput setaf 1) This Speed Test is with PIA VPN Inactive"
                fi
                tput sgr0 # Reset Terminal Colors
cat <<"EOF"

Select Download Size

1. 10  MB
2. 20  MB
3. 50  MB
4. 100 MB
5. 200 MB
6. 400 MB
7. Main Menu

EOF

	read -r -n 1 size
case "${size}" in
	1)
	FileSize="10"
	;;
	2)
	FileSize="20"
	;;
	3)
	FileSize="50"
	;;
	4)
	FileSize="100"
	;;
	5)
	FileSize="200"
	;;
	6)
	FileSize="400"
	;;
	*)
	Main_Menu
	;;
	esac
tput cup 17 0
tput ed
printf "%b" "Download "${FileSize}"MB File From?" "\n"

	cat <<"EOF"

1. USA
2. UK
3. Germany
4. Netherlands
5. Canada
6. Singapore
7. Italy
8. Japan
9. Australia
0. Auto Select Fastest Location
EOF

printf "%b\n\n"

	read -r -n 1 location
	case "${location}" in
	1)
	URL="http://cachefly.cachefly.net/400mb.test"
	#URL="http://mirror.sfo12.us.leaseweb.net/speedtest/1000mb.bin"
	LOC="USA"
	;;
	2)
	URL="http://ipv4.download.thinkbroadband.com/512MB.zip"
	LOC="United Kingdom"
	;;
	3)
	URL="https://speed.hetzner.de/1GB.bin"
	LOC="Germany"
	;;
	4)
	URL="https://iperf.worldstream.nl/1000mb.bin"
	LOC="Netherlands"
	;;
	5)
	URL="http://ca-mr2-smart.serverlocation.co:82/1Gio.dat"
	LOC="Canada"
	;;
	6)
	URL="http://sg-smart.serverlocation.co:82/1Gio.dat"
	LOC="Singapore"
	;;
	7)
	URL="http://it-ml-smart.serverlocation.co:82/1Gio.dat"
	LOC="Italy"
	;;
	8)
	URL="http://jp-tk-smart.serverlocation.co:82/1Gio.dat"
	LOC="Japan"
	;;
	9)
	URL="http://au-sy.serverlocation.co:82/1Gio.dat"
	LOC="Australia"
	;;
	0)
	Autoselect
	URL=${BestDL}
	;;
	*)
	Main_Menu
	;;
	esac
#tput cup 41 0
tput cup 17 0
tput ed
tput sgr0
printf "%s\n" "Downloading "${FileSize}"MB's From ${LOC} "
#tput cup 43 0
tput cup 19 0
tput ed
printf "%b\n" $(dirname "${URL}")
tput setaf 3
DLspeed=$(printf "%b" "scale=2; " && curl --progress-bar --connect-timeout 10 -o /dev/null -r 0-"${FileSize}"000000 "${URL}" -w "%{speed_download}"  | sed "s/\,/\./g" && echo "/1048576");
tput setaf 5
printf "%b\n" "${DLspeed}" | bc -q | sed "s/$/ MB\/sec/;s/^/\tDownload Speed\: /";
tput sgr0
printf "%b\n"

	read -r -n 1 -p " Press Any Key To Continue " continue
	Main_Menu
}

# Auto select the fastest speed test file download site
Autoselect() {
tput cup 17 0
tput ed
printf "%b\n" "Auto Selecting Fastest Location....Please wait"
	declare -a arr=(
http://ipv4.download.thinkbroadband.com/512MB.zip
https://speed.hetzner.de/1GB.bin
http://cachefly.cachefly.net/400mb.test
https://iperf.worldstream.nl/1000mb.bin
http://ca-mr2-smart.serverlocation.co:82/1Gio.dat
http://sg-smart.serverlocation.co:82/1Gio.dat
http://it-ml-smart.serverlocation.co:82/1Gio.dat
http://jp-tk-smart.serverlocation.co:82/1Gio.dat
http://au-sy.serverlocation.co:82/1Gio.dat
)

#-----------------------------------------------------------------
 netselect "${arr[@]}" | awk '{print $2}' > file5 & SPIN_PID=$!
PBint=1
spin
wait
disown $SPIN_PID
kill -9 $SPIN_PID
BestDL=$(cat file5)
rm file5 2> /dev/null
if
[ "${BestDL}" = http://ipv4.download.thinkbroadband.com/512MB.zip ]; then
LOC="United Kingdom"
elif
[ "${BestDL}" = http://cachefly.cachefly.net/400mb.test ]; then
LOC="USA"
elif
[ "${BestDL}" = https://speed.hetzner.de/1GB.bin ]; then
LOC="Germany"
elif
[ "${BestDL}" = https://iperf.worldstream.nl/1000mb.bin ]; then
LOC="Netherlands"
elif
[ "${BestDL}" = http://ca-mr2-smart.serverlocation.co:82/1Gio.dat ]; then
LOC="Canada"
elif
[ "${BestDL}" = http://sg-smart.serverlocation.co:82/1Gio.dat ]; then
LOC="Singapore"
elif
[ "${BestDL}" = http://it-ml-smart.serverlocation.co:82/1Gio.dat ]; then
LOC="Italy"
elif
[ "${BestDL}" = http://jp-tk-smart.serverlocation.co:82/1Gio.dat ]; then
LOC="Japan"
elif
[ "${BestDL}" = http://au-sy.serverlocation.co:82/1Gio.dat ]; then
LOC="Australia"
else
tput setaf 1 # Red Text
printf "%b\n\n" "Unable to determine the fastest location. Manual Selection Required"
tput sgr0
rm file5 2> /dev/null
read -r -n 1 -p " Press Any Key To Continue " continue
Speed_Test
fi
}

Location_Check(){
	tput cup 16 0
    tput el1
    tput ed
    printf "%b\n"
	printf "%b\n" "Checking IP & Location Information"

            PIAconnect=$(curl -m 5 -s https://www.privateinternetaccess.com/pages/whats-my-ip/ | grep -c "You are protected")

            if (( "${PIAconnect}" > 0 )) ; then
                tput setaf 2 # Green Text
                printf "%b\n" "✔  You are Protected With PIA  ✔"
            else
				tput setaf 1 # Red Text
                printf "%b\n" "❌  You are NOT Protected With PIA  ❌"
            fi
            
            tput sgr0 # Reset Terminal Colors

			MYIP=$(curl -s -4 https://icanhazip.com)
            if [[ "${MYIP}" =~ ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
                MYIP="${MYIP}"
            fi

            if [[ "${MYIP}" =~ ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
                MYIP="${MYIP}"
            else
                MYIP=$(curl -s ifconfig.me)
            fi

            if [[ "${MYIP}" =~ ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
                MYIP="${MYIP}"
            else
                MYIP=$(curl -s https://ipinfo.io/ip)
            fi

            if [[ "${MYIP}" =~ ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
                MYIP="${MYIP}"
            else
                printf "%b\n" "Unable to Find Valid Information"
                #printf "%b\n" "${MYIP}"
                read -r -n 1 -p " Press Any Key To Continue " continue
			Main_Menu
            fi
            curl -s http://ip-api.com/json/${MYIP} | jq -r . | tr -d '"{},' | column -t -s : | tail -n+2
            #curl -s https://ipx.ac/json | jq -r '"IP Address : " + .ip,"IP Type: " + .geo.usage, "Network: " + .p0f.network_link, "Domain Name: " + .geo.domainName, "City: " + .geo.cityName, "State: " + .geo.regionName, "Country: " + .geo.countryName, "UTC Offset: " + .timezone, "Lat / Lon: " + "\(.geo.latitude)" + "," + "\(.geo.longitude)", "Provider: " + .geo.isp, "Hostname: " + .ptr, "ASN: " + .asn' | column -s: -t
			#curl -s https://ipapi.co/${MYIP}/json/ | jq -r '"IP : " + .ip, "City: " + .city, "State: " + .region, "Country: " + .country_name, "TimeZone: " + .timezone, "UTC Offset: " + .utc_offset, "Location: " + "\(.latitude)" + "," + "\(.longitude)", "Provider: " + .org' | column -s: -t
			# curl https://ipapi.co/${MYIP}/json/
			# curl -s "http://ipinfo.io/" | awk -F\" '{print $2":",$4}' | sed 's/[",]//g' | sed '1d;$d' | sed -e "s/\b\(.\)/\u\1/g" | column -s: -t
			# curl -s http://ip-api.com/#"${MYIP}" | sed 's/[",{}]//g'
			# MYIP=$(curl -s "http://ipinfo.io/" | awk -F\" '{print $4}' | head -n2 | tail -n1)
			# LATLON=$(curl -s https://ipapi.co/ | grep 'Latitude / Longitude' | sed 's/.*\-text="//;s/">.*//' | tr -d ' ')
			# MAP1=$(curl -m 5 -s http://ping.pe/"${MYIP}" | grep -E "https:\/\/www\.google\.com\/maps\/place\/" | sed 's/.*href=\(.*\)>MAP<\/a><\/b><br><br>/\1/' | tr -d \'\")
			# MAP3='https://www.geolocation.com/?ip='${MYIP}''
			LATLON=$(curl -s https://ipapi.co/latlong/)
			LATLON2=$(printf ${LATLON} | sed 's/,/\//g') # Replace the , with a / for use with OpenStreetMaps
			MAP4='www.google.com/maps/@'${LATLON}',10z'
			MAP5='https://www.whatsmyip.org/ip-geo-location/?ip='${MYIP}
			MAP6='https://www.openstreetmap.org/#map=12/'${LATLON2}
			printf "%b\n"
			tput sgr0
			printf "%b" "Location Map   ";tput setaf 2; printf "%b" ${MAP4} "\n"
			tput sgr0
			printf "%b" "Location Map   ";tput setaf 2; printf "%b" ${MAP5} "\n"
			tput sgr0
			printf "%b" "Location Map   ";tput setaf 2; printf "%b" ${MAP6} "\n"
			printf "%b\n\n"
			tput setaf 3
			printf "%b\n" "Is the Server Really where you think it is?

Open the link below and wait for the lowest ping times.
If your server is near that location you can be reasonably
sure its not a \"Virtual Server\" but real hardware in that area.
"
			tput setaf 2
			printf "%b" 'http://ping.pe/'${MYIP} "\n\n\n"
			tput sgr0
            read -r -n 1 -p " Press Any Key To Continue " continue
            tput cup 16 0
			tput el1
			tput ed
            Main_Menu
}

LeakTest(){

	tput cup 16 0
    tput el1
    tput ed
    #printf "%b\n"
printf "%b" "Scanning For DNS Leaks." "\n"

	for run in {1..20}
	do
dig +short txt whoami.ds.akahelp.net | tr -d '[ ] [ns] ["] [ecs] [ip] []' >> DNS.txt

done & SPIN_PID=$!

PBint=.2
spin
wait
disown $SPIN_PID 2> /dev/null
kill -9 $SPIN_PID 2> /dev/null

sed -i 's/255.255.255.255//g' DNS.txt
sort < DNS.txt | uniq > uniDNS.txt && mv uniDNS.txt DNS.txt
printf "%b" "Upstream-DNS-Address	Provider" "\n" >> DNS2.txt printf "%b" "=====================	====================" "\n\n" >> DNS2.txt while read IP; do
printf "${IP} " >> DNS2.txt; printf "%b" $(whois "${IP}" | awk '/NetName/ {print $2;exit}') "\n" >> DNS2.txt
done < DNS.txt
tput cup 16 0
tput el
tput el1
tput ed
tput setaf 3
printf "%b\n" "If you see your ISP IP address you have a leak.
Your DNS is coming from the following Location's"
tput setaf 2; printf "%b\n" "Note: DNS may appear as an IPV6 address"  "\n"
tput sgr0
grep -v 'fgets' DNS2.txt | column -t -e
rm uniDNS.txt DNS2.txt DNS.txt 2> /dev/null
printf "%b\n"
tput setaf 1
printf "%b\n\n" "Select 1 to Retest"
tput sgr0 
		read -r -n 1 -p "Any Other Key For Main Menu" selection
           

            case "${selection}" in
		1)
		LeakTest
		;;

		*)
		Main_Menu
		;;
		esac
}

Change_Mac_Menu() {


mount |grep nfs > /dev/null 2>&1
if
[ "$?" = 0 ]; then
	tput cup 16 0 # Move cursor to line 16 column 0
    tput ed # Clear all text below cursor
    tput civis # invisible cursor
    tput setaf 1
 printf "%b\n" "It looks like you may have network resources mounted
 Disconnect Network drives before changing your MAC"
 printf "%b\n"
 tput sgr0
read -r -n 1 -p " Press Any Key To Continue " continue
Main_Menu

fi

	tput cup 16 0 # Move cursor to line 16 column 0
    tput ed # Clear all text below cursor
    tput civis # invisible cursor

    printf "%b\n" "Retreiving MAC Vendor Info"
    
	IFACE=$(ip -o link show | awk '{print $2,$9}' | grep UP | tr ': UP' '\n' | awk NF)
	FACTORY_MAC=$(ethtool -P ${IFACE} | awk '{print $3}')
	ACTIVE_MAC=$(ip addr show ${IFACE} | grep 'link/ether' | awk '{print $2}')
	VENDOR="$(curl -s https://api.macvendors.com/"${FACTORY_MAC}")"
	sleep 1
	VENDOR2="$(curl --max-time 5 -s https://api.macvendors.com/"${ACTIVE_MAC} ")"

	


if [[ ${VENDOR} = *"error"* ]]; then 
	VENDOR="MFG Not Listed"
fi

if [[ ${VENDOR2} = *"error"* ]]; then 
	VENDOR2="MFG Not Listed"
fi

	tput cup 16 0 # Move cursor to line 16 column 0
    tput ed # Clear all text below cursor
    tput civis # invisible cursor


printf "%b" "Factory MAC ${FACTORY_MAC} "; printf "%b\n" "		${VENDOR}"
printf "%b" "Active  MAC ${ACTIVE_MAC} "; printf "%b\n" "		${VENDOR2}"


if [[ ${IFACE} = "wlx"* ]]; then
tput setaf 1
printf "%b\n\n" "Your Wireless Device appears to be external (USB?)
Changing MAC's on external adapters is not supported do to the newly implemented
Predictable Network Interface Names protocol"
tput setaf 9
tput sgr0
printf "%b\n" "Returning To Main Menu"
sleep 10
Main_Menu
fi
cat <<"EOF"

Select Option

1. Random MAC Change

2. Restore MAC To Factory Setting

3. Manual MAC Address

4. Main Menu

EOF

read -r -n 1 option # Wait and read menu selection then continue with a single key press

    case "${option}" in
        1)
            Change_Mac_Auto
            ;;
        2)
            Change_Mac_Restore
            ;;
        3)
			Manual_Mac
            ;;
        *)
            #tput cup 16 0
            #tput ed
            Main_Menu
            ;;
    esac


	
}



Change_Mac_Auto() {
tput cup 16 0
tput el1
tput ed
printf "%b\n"
ADDRESS=""
IFACE=$(ip -o link show | awk '{print $2,$9}' | grep UP | tr ': UP' '\n' | awk NF)
OLD_MAC=$(ip addr show "$IFACE" | grep 'link/ether' | awk '{print $2}')
FACTORY_MAC=$(ethtool -P $IFACE | awk '{print $3}')
NEW_MAC="$(printf $RANDOM | md5sum | head -c 17 | sed -r 's/(..)./\1:/g')"
LastFive=$(printf ${NEW_MAC} | cut -d: -f 2-6 )
FirstByte=$(printf ${NEW_MAC} | cut -d: -f 1 )
FirstByte=$(printf '%02x' $(( 0x$FirstByte & 254 | 2)) )
NEW_MAC="${FirstByte}:${LastFive}"
tput setaf 9
printf "%b\n" "Taking Down "$IFACE""
sleep 1
#ifconfig "$IFACE" down
ip link set dev "$IFACE" down
service network-manager stop

tput setaf 3

ip link set "$IFACE" address ${NEW_MAC}

    tput cup 17 0
    tput el1
    tput ed
	tput setaf 3
	
if (( COUNT >= 3 )); then
COUNT=0
tput setaf 1
printf "%b\n" "Max Retries Error... Aborting"
tput setaf 9
ip link set dev "$IFACE" up
service network-manager start
sleep 3
Main_Menu

else COUNT=$(( COUNT + 1 )); printf "%b\n" "Changing the MAC on "$IFACE", Attempt # $COUNT of MAX 3"

fi    
tput sc
tput setaf 9
#ifconfig "$IFACE" up
ip link set dev "$IFACE" up
service network-manager start
printf "%b\n" "Bringing Up "$IFACE""
tput setaf 1
printf "%b\n" "Waiting For "$IFACE" To Become Active"
tput setaf 9
until [[ $ADDRESS =~ [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]; do
		sleep 2
		ADDRESS=$(hostname -I | awk '{print $1}')

done & SPIN_PID=$!
PBint=2
spin
wait
disown $SPIN_PID 2> /dev/null
kill -9 $SPIN_PID 2> /dev/null

ACTIVE_MAC=$(ip addr show "$IFACE" | grep 'link/ether' | awk '{print $2}')

tput cup 16 0
tput el1
tput ed

if [ ${ACTIVE_MAC} = ${OLD_MAC}  ] || [ ${ACTIVE_MAC} = ${FACTORY_MAC} ] ; then

printf "%b\n\n" "MAC Not Accepted"
printf "%b" "MAC Is Still " ${ACTIVE_MAC} "\n\n"
printf "%b" "Factory MAC ;" ${FACTORY_MAC} "\n" | column -t -s";"
printf "%b" "Old MAC     ;" ${OLD_MAC} "\n" | column -t -s";"
printf "%b\n" "Restarting Random MAC Assignment"
sleep 3
Change_Mac_Auto
else

printf "%b\n" "Retreiving MAC Vendor Info"

VENDOR="$(curl --max-time 5 -s https://api.macvendors.com/"${FACTORY_MAC} ")"
sleep 1
VENDOR2="$(curl --max-time 5 -s https://api.macvendors.com/"${OLD_MAC}")"
sleep 1
VENDOR3="$(curl --max-time 5 -s https://api.macvendors.com/"${ACTIVE_MAC} ")"

if [[ ${VENDOR} = *"error"* ]]; then 
	VENDOR="MFG Not Listed"
fi

if [[ ${VENDOR2} = *"error"* ]]; then 
	VENDOR2="MFG Not Listed"
fi

if [[ ${VENDOR3} = *"error"* ]]; then 
	VENDOR3="MFG Not Listed"
fi



fi

if [ ${ACTIVE_MAC} = ${NEW_MAC} ]; then
COUNT=0
tput setaf 2
printf "%b" "Success!!" "\n\n"
tput setaf 9
tput sgr0

printf "%b" "Factory MAC ;" "${FACTORY_MAC} ;" "${VENDOR} ;" "\n\n" | column -t -s";"
printf "%b" "Old MAC     ;" "${OLD_MAC} ;" "${VENDOR2} ;" "\n\n" | column -t -s";"
printf "%b" "New MAC     ;" "${NEW_MAC} ;" "${VENDOR3} ;" "\n\n" | column -t -s";"
printf "%b\n"
ADDRESS=$(hostname -I | awk '{print $1}')
printf "%b\n\n" "$IFACE Is Up and has an IP address of $ADDRESS "
fi
cat <<"EOF"

Select Option

1. Random MAC Change

2. Restore MAC To Factory Setting

3. Manual MAC Address

4. Main Menu

EOF

tput setaf 9
tput sgr0
read -r -n 1  selection
            case "${selection}" in
		1)
		Change_Mac_Auto
		;;

		2)
		Change_Mac_Restore
		;;

		3)
		Manual_Mac
		;;
		
		*)
		Main_Menu
		;;
		esac

}


Change_Mac_Restore() {

	tput cup 16 0 # Move cursor to line 16 column 0
    tput ed # Clear all text below cursor
    tput civis # invisible cursor
ADDRESS=""
IFACE=$(ip -o link show | awk '{print $2,$9}' | grep UP | tr ': UP' '\n' | awk NF)
printf "%b\n" "Restoring ${IFACE} Factory MAC Address"
sleep 2
tput cup 16 0 # Move cursor to line 16 column 0
tput ed # Clear all text below cursor
printf "%b\n" "Taking ${IFACE} Offline"
sleep 2
tput cup 17 0 # Move cursor to line 16 column 0
tput ed # Clear all text below cursor
ip link set dev "$IFACE"  down
service network-manager stop

if (( COUNT >= 3 )); then
COUNT=0
tput setaf 1
printf "%b\n" "Max Retries Error... Aborting"
ip link set dev "$IFACE" up
service network-manager restart
tput setaf 9
sleep 3
Main_Menu

else
tput cup 16 0 # Move cursor to line 16 column 0
tput ed # Clear all text below cursor
COUNT=$(( COUNT + 1 )); printf "%b\n" "Restoring the Factory MAC on "$IFACE", Attempt # $COUNT of MAX 3"
ip link set ${IFACE} address $(ethtool -P ${IFACE} | awk '{print $3}')
fi    

tput setaf 9
#ifconfig "$IFACE" up
ip link set dev "$IFACE" up
service network-manager start
tput cup 16 0 # Move cursor to line 16 column 0
tput ed # Clear all text below cursor
printf "%b\n\n" "Bringing Up "$IFACE""
sleep 2
tput cup 16 0 # Move cursor to line 16 column 0
tput ed # Clear all text below cursor
tput setaf 1
printf "%b\n\n" "Waiting For "$IFACE" To Become Active"
tput setaf 9
tput sgr0
until [[ $ADDRESS =~ [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]; do
		sleep 2
		ADDRESS=$(hostname -I | awk '{print $1}')

done & SPIN_PID=$!

PBint=2
spin
wait
disown $SPIN_PID 2> /dev/null
kill -9 $SPIN_PID 2> /dev/null
FACTORY_MAC=$(ethtool -P ${IFACE} | awk '{print $3}')
ACTIVE_MAC=$(ip addr show ${IFACE} | grep 'link/ether' | awk '{print $2}')
VENDOR="$(curl --max-time 5 -s https://api.macvendors.com/"${FACTORY_MAC}")"
sleep 1
VENDOR2="$(curl --max-time 5 -s https://api.macvendors.com/"${ACTIVE_MAC} ")"
ADDRESS=$(hostname -I | awk '{print $1}')
if [ ${FACTORY_MAC} = ${ACTIVE_MAC} ]; then
COUNT=0
tput setaf 2
	tput cup 16 0 # Move cursor to line 16 column 0
    tput ed # Clear all text below cursor
    tput civis # invisible cursor
#printf "%b\n\n"
printf "%b\n" "Success!!
Active MAC Matches Factory MAC"
printf "%b\n"
tput setaf 9
tput sgr0
fi


if [[ ${VENDOR} = *"error"* ]]; then 
	VENDOR="MFG Not Listed"
fi

if [[ ${VENDOR2} = *"error"* ]]; then 
	VENDOR2="MFG Not Listed"
fi


tput sgr0
printf "%b" "Factory MAC " "\t" "${FACTORY_MAC}" "\t" "${VENDOR}" "\n"
printf "%b" "Active  MAC " "\t" "${ACTIVE_MAC}" "\t" "${VENDOR2}" "\n\n"
printf "%b\n"
printf "%b\n\n" "${IFACE} Is Up and has an IP address of ${ADDRESS}"

read -r -n 1 -p " Press Any Key To Continue " continue
Main_Menu
	
}

#----------------------------------------------------------------------
Manual_Mac() {

tput cup 16 0 # Move cursor to line 16 column 0
tput ed # Clear all text below cursor
tput sgr0

cat <<"EOF"

Enter MAC Address in standard format and press enter

Example:  7C:8B:CA:02:88:70 or 00:1B:63:84:45:E6

7C:8B:CA:*:*:*	TP-LINK
00:1B:63:*:*:*	Apple
10:7D:1A:*:*:*	Dell
18:67:B0:*:*:*	Samsung
34:D2:70:*:*:*	Amazon
B8:4F:D5:*:*:*	Microsoft
08:9E:08:*:*:*	Google

EOF
tput setaf 3
read -p "MAC Address:  " REPLY
tput setaf 2
Man_MAC="$REPLY"
tput cup 16 0
tput el1
tput ed
printf "%b\n"
if
[[ "$Man_MAC" =~ ^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$ ]]; then
printf "%b\n" "Good Mac Address"
else
printf "%b\n" "Invalid Mac Address"
sleep 3
Manual_Mac
fi
OLD_MAC=$(ip addr show "$IFACE" | grep 'link/ether' | awk '{print $2}')
FACTORY_MAC=$(ethtool -P $IFACE | awk '{print $3}')
ADDRESS=""
ACTIVE_MAC=$(ip addr show "$IFACE" | grep 'link/ether' | awk '{print $2}')
IFACE=$(ip -o link show | awk '{print $2,$9}' | grep UP | tr ': UP' '\n' | awk NF)
VENDOR="$(curl --max-time 5 -s https://api.macvendors.com/"${FACTORY_MAC}")"
tput setaf 9
printf "%b\n" "Taking Down "$IFACE""
sleep 1
#ifconfig "$IFACE" down
ip link set dev "$IFACE" down
service network-manager stop

tput setaf 3

ip link set "$IFACE" address "$Man_MAC"

    tput cup 17 0
    tput el1
    tput ed
	tput setaf 3
	
if (( COUNT >= 3 )); then
COUNT=0
tput setaf 1
printf "%b\n" "Max Retries Error... Aborting"
tput setaf 9
ip link set dev "$IFACE" up
service network-manager start &
sleep 3
Main_Menu

else COUNT=$(( COUNT + 1 )); printf "%b\n" "Changing the MAC on "$IFACE", Attempt # $COUNT of MAX 3"

fi    
tput sc
tput setaf 9
#ifconfig "$IFACE" up
ip link set dev "$IFACE" up
service network-manager start
printf "%b\n" "Bringing Up "$IFACE""
tput setaf 1
printf "%b\n" "Waiting For "$IFACE" To Become Active"
tput setaf 9
until [[ $ADDRESS =~ [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]; do
		sleep 2
		ADDRESS=$(hostname -I | awk '{print $1}')

done & SPIN_PID=$!
PBint=2
spin
wait
disown $SPIN_PID 2> /dev/null
kill -9 $SPIN_PID 2> /dev/null

ACTIVE_MAC=$(ip addr show "$IFACE" | grep 'link/ether' | awk '{print $2}')

tput cup 16 0
tput el1
tput ed

if [ ${ACTIVE_MAC} = ${OLD_MAC}  ] || [ ${ACTIVE_MAC} = ${FACTORY_MAC} ] ; then

printf "%b\n\n" "MAC Not Accepted"
printf "%b" "MAC Is Still " ${ACTIVE_MAC} "\n\n"
printf "%b" "Factory MAC ;" ${FACTORY_MAC} "\n" | column -t -s";"
printf "%b" "Old MAC     ;" ${OLD_MAC} "\n" | column -t -s";"
printf "%b\n" "Returning to MAC Assignment Menu"
sleep 3
Manual_Mac
else

printf "%b\n" "Retreiving MAC Vendor Info"

VENDOR="$(curl --max-time 5 -s https://api.macvendors.com/"${FACTORY_MAC} ")"
sleep 1
VENDOR2="$(curl --max-time 5 -s https://api.macvendors.com/"${OLD_MAC}")"
sleep 1
VENDOR3="$(curl --max-time 5 -s https://api.macvendors.com/"${ACTIVE_MAC} ")"

if [[ ${VENDOR} = *"error"* ]]; then 
	VENDOR="MFG Not Listed"
fi

if [[ ${VENDOR2} = *"error"* ]]; then 
	VENDOR2="MFG Not Listed"
fi

if [[ ${VENDOR3} = *"error"* ]]; then 
	VENDOR3="MFG Not Listed"
fi

tput cup 16 0
tput el1
tput ed

printf "%b" "Factory MAC ;" "${FACTORY_MAC} ;" "		${VENDOR} ;" "\n\n" | column -t -s";"
printf "%b" "Old MAC     ;" "${OLD_MAC} ;" "		${VENDOR2} ;" "\n\n" | column -t -s";"
printf "%b" "New MAC     ;" "${ACTIVE_MAC} ;" "		${VENDOR3} ;" "\n\n" | column -t -s";"
printf "%b\n"
fi
ACTIVE_MAC=$(ip addr show "$IFACE" | grep 'link/ether' | awk '{print $2}')
if [ ${ACTIVE_MAC} = ${Man_MAC} ]; then
COUNT=0
tput setaf 2
printf "%b" "Success!!" "\n\n"
tput setaf 9
tput sgr0
fi
ADDRESS=$(hostname -I | awk '{print $1}')
printf "%b\n\n" "$IFACE Is Up and has an IP address of $ADDRESS "

cat <<"EOF"

Select Option

1. Random MAC Change

2. Restore MAC To Factory Setting

3. Manual MAC Address

4. Main Menu

EOF

tput setaf 9
tput sgr0
read -r -n 1  selection
            case "${selection}" in
		1)
		Change_Mac_Auto
		;;

		2)
		Change_Mac_Restore
		;;

		3)
		Manual_Mac
		;;
		
		*)
		Main_Menu
		;;
		esac


}
#----------------------------------------------------------------------
ctrl_c() {
	printf "%b\n\n" "CTRL-C Detected...Waiting for Clean-Up Before Exiting"
	service network-manager start &
	disown $SPIN_PID 2> /dev/null
	kill -9 $SPIN_PID 2> /dev/null
	rm file1 file2 file3 file4 file5 uniDNS.txt DNS2.txt DNS.txt 2> /dev/null
	tput cnorm
	tput cup 0 0
	#tput rc
	tput ed
	exit
}
Dependencies=('bc' 'wget' 'dig' 'curl' 'whois' 'jq' 'ethtool' )
CheckScriptDependencies ${Dependencies[@]}
trap ctrl_c SIGHUP SIGINT SIGTERM
#trap ctrl_c SIGTERM
#CheckScriptDependencies
